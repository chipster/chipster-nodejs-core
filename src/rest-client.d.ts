import { RxHttpRequestResponse } from "@akanass/rx-http-request";
import { Dataset, Job, Module, Rule, Session, Tool } from "chipster-js-common";
import { CoreOptions } from "request";
import { Observable, Subject } from "rxjs";
export declare class RestClient {
    private isClient;
    token: string;
    private serviceLocatorUri?;
    readonly agentOptions: {
        keepAlive: boolean;
        maxSockets: number;
        keepAliveMsecs: number;
    };
    readonly httpAgent: any;
    readonly httpsAgent: any;
    private config;
    constructor(isClient: boolean, token: string, serviceLocatorUri?: string);
    getToken(username: string, password: string): Observable<string>;
    getStatus(host: any): Observable<any>;
    getSessions(): Observable<Session[]>;
    getSession(sessionId: string): Observable<Session>;
    postSession(session: Session): Observable<any>;
    extractSession(sessionId: string, datasetId: string): Observable<string>;
    packageSession(sessionId: string, file: string): Observable<any>;
    deleteSession(sessionId: string): Observable<any>;
    getDatasets(sessionId: any): Observable<Dataset[]>;
    getDataset(sessionId: any, datasetId: any): Observable<Dataset>;
    deleteDataset(sessionId: string, datasetId: string): Observable<any>;
    postDataset(sessionId: string, dataset: Dataset): Observable<any>;
    putDataset(sessionId: string, dataset: Dataset): Observable<string>;
    getJobs(sessionId: any): Observable<Job[]>;
    getJob(sessionId: any, jobId: any): Observable<Job>;
    postJob(sessionId: string, job: Job): Observable<any>;
    putJob(sessionId: string, job: Job): Observable<string>;
    deleteJob(sessionId: string, jobId: string): Observable<any>;
    getTools(): Observable<Module[]>;
    getTool(toolId: any): Observable<Tool>;
    downloadFile(sessionId: string, datasetId: string, file: string): Observable<any>;
    getToFile(uri: string, file: string): Subject<any>;
    getWriteStream(file: string): any;
    getReadStream(file: string): any;
    uploadFile(sessionId: string, datasetId: string, file: string): Subject<any>;
    getRules(sessionId: any): Observable<Rule[]>;
    postRule(sessionId: string, username: string, readWrite: boolean): Observable<any>;
    deleteRule(sessionId: string, ruleId: string): Observable<any>;
    checkForError(response: any): void;
    getFile(sessionId: any, datasetId: any, maxLength: any): Observable<string>;
    getAuthUri(): Observable<any>;
    getFileBrokerUri(): Observable<any>;
    getSessionDbUri(): Observable<any>;
    getSessionDbEventsUri(): Observable<any>;
    getToolboxUri(): Observable<any>;
    getSessionWorkerUri(): Observable<any>;
    getServices(): Observable<any>;
    getServiceUri(serviceName: any): Observable<any>;
    getServiceLocator(webServer: any): Observable<any>;
    getPooled(uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse<any>>;
    putPooled(uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse<any>>;
    postPooled(uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse<any>>;
    deletePooled(uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse<any>>;
    getJson(uri: string, token: string): Observable<any>;
    getWithToken(uri: string, token: string, headers?: Object): Observable<string>;
    getBasicAuthHeader(username: any, password: any, headers?: any): any;
    getAgent(uri: string): any;
    get(uri: string, headers?: Object): Observable<string>;
    post(uri: string, headers?: Object, body?: Object): Observable<string>;
    put(uri: string, headers?: Object, body?: Object): Observable<string>;
    postJson(uri: string, token: string, data: any): Observable<string>;
    putJson(uri: string, token: string, data: any): Observable<string>;
    deleteWithToken(uri: string, token: string): Observable<any>;
    delete(uri: string, headers?: Object): Observable<any>;
    handleResponse(data: any): any;
    responseToError(response: any): any;
}
